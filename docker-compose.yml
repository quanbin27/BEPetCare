version: '3.8'

services:

  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  users:
    build:
      context: .
      dockerfile: users/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  products:
    build:
      context: .
      dockerfile: products/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  orders:
    build:
      context: .
      dockerfile: orders/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  appointments:
    build:
      context: .
      dockerfile: appointments/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  records:
    build:
      context: .
      dockerfile: records/Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  payments:
    build:
      context: .
      dockerfile: payments/Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  notification:
    build:
      context: .
      dockerfile: notification/Dockerfile
    ports:
      - "8077:8077"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env.docker
    networks:
      - backend

  mysql:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 27052002
      MYSQL_DATABASE: bepetcare
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend

  # Kafka configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  backend:

volumes:
  mysql_data: